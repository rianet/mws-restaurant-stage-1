class DBHelper{constructor(){this.restaurantData={},this.dbPromise=idb.open("restaurants-db",1,t=>{t.createObjectStore("restaurants",{keyPath:"id"})})}static get DATABASE_URL(){return"http://localhost:1337/"}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-db",1,t=>{t.createObjectStore("restaurants",{keyPath:"id"})}):Promise.resolve()}static fetchRestaurants(t){return new Promise(function(t,e){fetch(`${DBHelper.DATABASE_URL}restaurants`,{}).then(t=>t.json()).then(e=>{DBHelper._dbPromise.then(function(t){if(t){var r=t.transaction("restaurants","readwrite").objectStore("restaurants");e.forEach(t=>{r.put(t)}),DBHelper.restaurantData=e}}),t(e)})})}static fetchRestaurantById(t,e){return DBHelper.restaurantData.find(e=>e.id==t)}static fetchRestaurantByCuisine(t,e){return DBHelper.restaurantData.filter(e=>e.cuisine_type==t)}static fetchRestaurantByNeighborhood(t,e){return DBHelper.restaurantData.filter(e=>e.neighborhood==t)}static fetchRestaurantByCuisineAndNeighborhood(t,e){if(void 0!==DBHelper.restaurantData){let r=DBHelper.restaurantData;return"all"!==t&&(r=r.filter(e=>e.cuisine_type==t)),"all"!==e&&(r=r.filter(t=>t.neighborhood==e)),r}}static fetchNeighborhoods(t){if(void 0!==DBHelper.restaurantData){const t=this.restaurantData.map(t=>t.neighborhood);return t.filter((e,r)=>t.indexOf(e)==r)}}static fetchCuisines(t){if(void 0!==DBHelper.restaurantData){const t=this.restaurantData.map((t,e)=>t.cuisine_type);return t.filter((e,r)=>t.indexOf(e)==r)}}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}